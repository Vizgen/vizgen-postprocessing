name: Main

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
  workflow_dispatch:

jobs:
  static_analysis:
    name: Linting and Type Checking
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10" ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --only dev

      - name: Black
        uses: psf/black@stable
        with:
          options: "--line-length 120 --check --verbose"
          version: "~= 23.0"

      - name: flake8
        run: poetry run flake8 src tests --count --max-line-length=120 --extend-ignore=E203,E266,E501,W503,F403 --statistics

      - name: MyPy
        run: poetry run mypy src --ignore-missing-imports

  unit_tests:
    name: Build Project and Unit Testing
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10" ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: print ENV variables
        run: printenv

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0.8.1
        with:
          credentials_json: ${{ secrets.VZGPT_GCS_SERVICE_ACCOUNT_KEY }}

      - name: Configure AWS credentials for pytest
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VZGPT_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VZGPT_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install OS packages
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \
          libvips42 \
          lcov

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction --all-extras

      - name: Test with pytest
        run: poetry run pytest tests/ --cov=src/ --cov-report=lcov

      - name: Upload test coverage for all files
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.lcov

  deploy:
    needs:
      - static_analysis
      - unit_tests
    # Only run this job if new work is pushed to "develop"
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-22.04
    concurrency: release
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10" ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Print ENV Variables
      - name: print ENV variables
        run: printenv

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Semantic Release
        run: poetry install --no-interaction

      - name: Use Python Semantic Release to prepare release
        id: python-semantic-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            poetry run semantic-release publish
            echo "VERSION=$(poetry run semantic-release print-version --current)" >> $GITHUB_OUTPUT

      - name: Build documentation
        run: |
          mkdir gh-pages
          touch gh-pages/.nojekyll
          poetry run make html --directory docs
          cp -r docs/build/html/* gh-pages/

      - name: Deploy documentation
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages
          folder: gh-pages

      - name: Publish to PyPI
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}


  docker_build:
    needs:
      - static_analysis
      - unit_tests
      - deploy
    # Only run this job if new work is pushed to "develop"
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-22.04
    concurrency: release
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10" ]
    steps:
      - uses: actions/checkout@v3

      # Print ENV Variables
      - name: print ENV variables
        run: printenv

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            vzgdocker/vpt:latest
            vzgdocker/vpt:${{ steps.python-semantic-release.outputs.VERSION }}
          build-args: |
            "VERSION=${{ steps.python-semantic-release.outputs.VERSION }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max
