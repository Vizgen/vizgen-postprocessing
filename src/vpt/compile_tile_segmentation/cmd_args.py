from argparse import ArgumentParser
from dataclasses import dataclass

from vpt.utils.output_tools import MIN_ROW_GROUP_SIZE
from vpt.utils.validate import validate_exists


@dataclass
class CompileTileSegmentationArgs:
    parameters_json_path: str
    max_row_group_size: int
    overwrite: bool


def validate_cmd_args(args: CompileTileSegmentationArgs):
    validate_exists(args.parameters_json_path)
    if args.max_row_group_size < MIN_ROW_GROUP_SIZE:
        raise ValueError(f'Row group size should be at least {MIN_ROW_GROUP_SIZE}')


def get_parser():
    parser = ArgumentParser(description='Combines the per-tile segmentation outputs into a single, internally-consistent '
                            'parquet file containing all of the segmentation boundaries found in the experiment.',
                            add_help=False
                            )
    required = parser.add_argument_group('Required arguments')
    required.add_argument('--input-segmentation-parameters', type=str, required=True,
                          help='Json file generated by prepare-segmentation that fully '
                               'specifies the segmentation to run.')

    opt = parser.add_argument_group('Optional arguments')
    opt.add_argument('--max-row-group-size', type=int, default=17500, required=False,
                     help='Maximum number of rows in row groups inside output parquet files. Cannot be less '
                          f'than {MIN_ROW_GROUP_SIZE}')
    opt.add_argument('--overwrite', action='store_true', default=False, required=False,
                     help='Set flag if you want to use non empty directory and agree that files can be over-written.')
    opt.add_argument("--help", action="help", help="Show this help message and exit")

    return parser


def parse_cmd_args():
    return get_parser().parse_args()
